import unittest

from node import Node
from tree import Tree
from calendar import Calendar

class TreeTest(unittest.TestCase):
    def test_init(self):
        node = Node(10,20)
        tree = Tree(node)
        self.assertEqual(tree.root.lo, 10)
        self.assertEqual(tree.root.hi, 20)
        self.assertEqual(tree.root.max, 20)

    def test_single_rotation(self):
        a = Node(20,30)
        b = Node(4, 5)
        c = Node(15, 20)
        tree= Tree(a)
        tree.insert(b)
        tree.insert(c)
        self.assertEqual(tree.root, c)
        self.assertEqual(tree.root.max, 30)
        self.assertEqual(tree.root.left, b)
        self.assertEqual(tree.root.right, a)
        self.assertEqual(tree.root.left.left, None)
        self.assertEqual(tree.root.left.right, None)

        self.assertEqual(tree.root.left.left, None)
        self.assertEqual(tree.root.left.right, None)
    
    def test_double_rotation(self):
        a=Node(20,25)
        b=Node(4,5)
        c=Node(26,30)
        d=Node(3,4)
        e=Node(9,10)
        f=Node(15,20)

        tree = Tree(a)
        tree.insert(b)
        tree.insert(c)
        tree.insert(d)
        tree.insert(e)
        tree.insert(f)
        # tree shape
        self.assertEqual(tree.root, e)
        self.assertEqual(tree.root.left, b)
        self.assertEqual(tree.root.right, a)
        self.assertEqual(tree.root.left.left, d)
        self.assertEqual(tree.root.right.left, f)
        self.assertEqual(tree.root.right.right, c)

    def test_find_interval(self):
        a=Node(20,25)
        b=Node(4,5)
        c=Node(26,30)
        d=Node(3,4)
        e=Node(9,10)
        f=Node(15,20)

        tree = Tree(a)
        tree.insert(b)
        tree.insert(c)
        tree.insert(d)
        tree.insert(e)
        tree.insert(f)

        self.assertFalse(tree.lookup(4, 10))
        self.assertTrue(tree.lookup(25, 26))
        self.assertFalse(tree.lookup(9, 20))
        self.assertFalse(tree.lookup(0, 25))
        self.assertTrue(tree.lookup(30, 40))
    
    def test_deletion(self):
        a=Node(20,25)
        b=Node(4,5)
        c=Node(26,30)
        d=Node(3,4)
        e=Node(9,10)
        f=Node(15,20)

        tree = Tree(a)
        tree.insert(b)
        tree.insert(c)
        tree.insert(d)
        tree.insert(e)
        tree.insert(f)

        deleted = tree.delete_interval(26,30)
        self.assertEqual(deleted[0], c)
        self.assertIsNone(tree.root.right.right)

    def test_deletion_two(self):
        a=Node(20,25)
        b=Node(4,5)
        c=Node(26,30)
        d=Node(3,4)
        e=Node(9,10)
        f=Node(15,20)

        tree = Tree(a)
        tree.insert(b)
        tree.insert(c)
        tree.insert(d)
        tree.insert(e)
        tree.insert(f)
        deleted=tree.delete_interval(20, 30)
        self.assertEqual(deleted, [a, c])
        self.assertEqual(tree.root.right, f)
    
    def test_deletion_three(self):
        a=Node(20,25)
        b=Node(4,5)
        c=Node(26,30)
        d=Node(3,4)
        e=Node(9,10)
        f=Node(15,20)

        tree = Tree(a)
        tree.insert(b)
        tree.insert(c)
        tree.insert(d)
        tree.insert(e)
        tree.insert(f)
        tree.delete_interval(0, 100)
        self.assertIsNone(tree.root)

    def test_complex_tree(self):
        a=Node(20,25)
        b=Node(4,5)
        c=Node(26,28)
        d=Node(3,4)
        e=Node(9,10)
        f=Node(21, 23)
        g=Node(30,35)
        h=Node(2,3)
        i=Node(7,9)
        j=Node(11,13)
        k=Node(15,16)

        tree=Tree(a)
        tree.insert(b)
        tree.insert(c)
        tree.insert(d)
        tree.insert(e)
        tree.insert(f)
        tree.insert(g)
        tree.insert(h)
        tree.insert(i)
        tree.insert(j)
        tree.insert(k)

        self.assertEqual(tree.root, e)
        self.assertEqual(tree.root.left, b)
        self.assertEqual(tree.root.right, a)
        self.assertEqual(tree.root.left.left, d)
        self.assertEqual(tree.root.left.left.left, h)
        self.assertEqual(tree.root.left.right, i)
        self.assertEqual(tree.root.right.left, j)
        self.assertEqual(tree.root.right.left.right, k)
        self.assertEqual(tree.root.right.right, c)
        self.assertEqual(tree.root.right.right.left, f)
        self.assertEqual(tree.root.right.right.right, g)
    
    def test_complex_tree_lookup(self):
        a=Node(20,25)
        b=Node(4,5)
        c=Node(26,28)
        d=Node(3,4)
        e=Node(9,10)
        f=Node(21, 23)
        g=Node(30,35)
        h=Node(2,3)
        i=Node(7,9)
        j=Node(11,13)
        k=Node(15,16)

        tree=Tree(a)
        tree.insert(b)
        tree.insert(c)
        tree.insert(d)
        tree.insert(e)
        tree.insert(f)
        tree.insert(g)
        tree.insert(h)
        tree.insert(i)
        tree.insert(j)
        tree.insert(k)

        self.assertTrue(tree.lookup(10,11))
        self.assertTrue(tree.lookup(13,15))
        self.assertFalse(tree.lookup(3,15))

    def test_complex_tree_deletion(self):
        a=Node(20,25)
        b=Node(4,5)
        c=Node(26,28)
        d=Node(3,4)
        e=Node(9,10)
        f=Node(21, 23)
        g=Node(30,35)
        h=Node(2,3)
        i=Node(7,9)
        j=Node(11,13)
        k=Node(15,16)

        tree=Tree(a)
        tree.insert(b)
        tree.insert(c)
        tree.insert(d)
        tree.insert(e)
        tree.insert(f)
        tree.insert(g)
        tree.insert(h)
        tree.insert(i)
        tree.insert(j)
        tree.insert(k)

        deleted=tree.delete_interval(5,10)
        self.assertEqual(deleted, [e,i])
        self.assertEqual(tree.root, j)
        self.assertEqual(tree.root.right.left, k)
        self.assertEqual(tree.root.left, d)
        self.assertEqual(tree.root.left.right, b)

    def test_blank_calendar(self):
        cal=Calendar()
        self.assertTrue(cal.lookup(0,10))

if __name__=='__main__':
    unittest.main()